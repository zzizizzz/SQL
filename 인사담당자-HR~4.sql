/*
테이블 조인하기
    SELECT *
    FROM 테이블1, 테이블2;
    * 테이블의 조인은 조인 대상이되는 테이블의 이름을 FORM절에 나열하기만 하면된다.
    * 별도의 조건이 없으면 테이블1의 모든행과 테이블2의 모든 행이 연결된 가상의 테이블이 생성된다.
    * (테이블1의 행의 갯수* 테이블2의 행의 갯수) 만큼의 행이 조회된다.
        SELECT *
        FROM 테이블1, 테이블2;

조인조건 지정하기
    SELECT *
    FROM 테이블1, 테이블2
    WHERE 테이블1.컬럼명 = 테이블2.컬럼명
    * 조인된 테이블의 모든 행에서 조인조건을 만족하는 행이 의미있게 연결된 행이다.
    * 조인조건을 지정하면 의미있게 연결된 행만 조회할 수 있다.
    * 조인조건의 갯수 = 조인된 테이블의 갯수 -1
*/

-- REGIONS 테이블과 COUNTRIES 테이블조인하기
-- REGIONS 테이블의 모든 행 COUNTERIES 테이블의 모든 행이 조인된다.
SELECT *
FROM REIONS, COUNTRIES;
    
-- REGIONS 테이블과 COUNTRIES 테이블조인하고, 서로 연관있는 행만 필터링하기
SELECT  COUNTRIES.COUNTRY_ID, 
        COUNTRIES.COUNTRY_NAME, 
        REGIONS.REGION_NAME
FROM REGIONS, COUNTRIES
WHERE REGIONS.REGION_ID = COUNTRIES.REGION_ID;

-- 직원아이디, 직원이름, 직종아이디, 직종제목, 직종최소급여, 직종최대급여, 급여 조회하기
-- E           E        E                                           E
--                      J          J         J              J

SELECT  E.EMPLOYEE_ID,
        E.FIRST_NAME,
        E.JOB_ID,
        J.JOB_TITLE,
        J.MIN_SALARY,
        J.MAX_SALARY,
        E.SALARY
FROM  EMPLOYEES E, JOBS J
WHERE E.JOB_ID = J.JOB_ID;


/*
등가조인 
    조인조건에서 EQUAL(=) 연산자를 사용한다.
    조인에 참여하는 테이블에서 같은값을 가지고 있는 행끼리 조인한다.
    
    ORACLE등가조인
        SELECT A.컬럼명, A.컬럼명, B.컬럼명, B.컬럼명, ......
        FROM 테이블 A, 테이블 B
        WHERE A.컬럼명 = B.컬럼명;
        
    ANSI SQL 등가조인
        SELECT A.컬럼명, A.컬럼명, B.컬럼명, B.컬럼명....
        FROM 테이블 A JOIN 테이블 B
        ON  A.컬럼명 = B.컬럼명;
*/

-- 직원 아이디, 직원이름, 소속부서아이디, 소속부서명을 조회하기
--  E           E          E        
--                         D          D
-- ORACLE의 등가조인
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, D.DEPARTMENT_NAME
FROM EMPLOYEES E , DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID;

--ANSI SQL의 등가조인
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, B.DEPARTMENT_NAME
FROM EMPLOYEES A JOIN DEPARTMENTS B
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;

-- 부서관리자가 지정된 부서의 부서아이디, 부서명, 부서관리자명(직원이름)을 조회하기
--                          D       D       D 
--                                          E
SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME,
       E.FIRST_NAME
FROM DEPARTMENTS D, EMPLOYEES E
WHERE D.MANAGER_ID IS NOT NULL
AND D.MANAGER_ID = E.EMPLOYEE_ID;


SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME,
       B.FIRST_NAME
FROM DEPARTMENTS A JOIN EMPLOYEES B
ON A.MANAGER_ID = B.EMPLOYEE_ID
WHERE A.MANAGER_ID IS NOT NULL;

-- 직원아이디, 이름, 소속부서아이디, 소속부서명, 직종아이디, 직종제목, 급여를 조회하기
--   E        E         E                   E               E
--                      D        D    
--                                          J        J
SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME,
        E.JOB_ID, J.JOB_TITLE, E.SALARY
FROM EMPLOYEES E, DEPARTMENTS D, JOBS J
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID
AND E.JOB_ID = J.JOB_ID;

SELECT E.EMPLOYEE_ID, E.FIRST_NAME, E.DEPARTMENT_ID, D.DEPARTMENT_NAME,
        E.JOB_ID, J.JOB_TITLE, E.SALARY
FROM EMPLOYEES E 
JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
JOIN JOBS J ON E.JOB_ID = J.JOB_ID;

-- 직원아이디, 직원이름,소속부서아이디, 부서명, 소재지아이디, 근무지역도시명을 조회하기
--  E           E      E  
--                     D           D        D
--                                          L           L

SELECT  A.EMPLOYEE_ID,
        A.FIRST_NAME,
       -- D.DEPARTMENT_ID,
       -- E.DEPARTMENT_NAME,
       -- C.LOCATION_ID,
        C.CITY
FROM EMPLOYEES A, DEPARTMENTS B, LOCATIONS C
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
AND B.LOCATION_ID = C.LOCATION_ID;

/*
비등가조인용 샘플테이블 추가
*/
CREATE TABLE SALARY_GRADES (
    GRADE CHAR(1) PRIMARY KEY,
    MIN_SALARY NUMBER(8,2),
    MAX_SALARY NUMBER(8,2)
);
INSERT INTO SALARY_GRADES VALUES('A',0,2499);
INSERT INTO SALARY_GRADES VALUES('B',2500,4999);
INSERT INTO SALARY_GRADES VALUES('C',5000, 9999);
INSERT INTO SALARY_GRADES VALUES('D',10000,29999);
INSERT INTO SALARY_GRADES VALUES('E',20000,39999);

COMMIT;

/*
비등가조인
    조인저건을 지정할 떄 조인 대상테이블에서 같은 값을 가진 데이터를 가져오는 다신,
    크거나 작은 경우의 조건으로 데이터를 조회하는 조인방식이 비등가조인이다.
*/

-- 직원아이디, 직원이름, 급여,              급여등급을 조회하기
-- E          E       E     
--                    G(최소/최대급여)      G

SELECT A.EMPLOYEE_ID, FIRST_NAME, A.SALARY, B.GRADE
FROM EMPLOYEES A, SALARY_GRADES B
WHERE A.SALARY >=B.MIN_SALARY AND A.SALARY <= B.MAX_SALARY
ORDER BY A.EMPLOYEE_ID ASC;

-- ANSI SQL
SELECT A.EMPLOYEE_ID, FIRST_NAME, A.SALARY, B.GRADE
FROM EMPLOYEES A
JOIN SALARY_GRADES B
ON A.SALARY >= B.MIN_SALARY AND A.SALARY<= B.MAX_SALARY
ORDER BY A.EMPLOYEE_ID ASC;

/*
포괄조인 : 조인에 참여하지 못하는것도 나오게하는것

한쪽 테이블에만 데이터가 있고, 다른 쪽 테이블에 조인조건을 만족하는 데이터가 없는 경우,
조인에 참여하지 못하기 때문에 해당 행은 조회되지 않는다.
데이터가 없는 경우에도 데이터가 있는 쪽 테이블의 모든 행을 조회하는 조인방법이다.
모든 행을 조회하는 테이블의 반대쪽 조인조건에 포괄조인 기호를 추가한다.
*/

-- 부서아이디, 부서이름, 부서관리자 아이디,    부서관리자이름을 조회
-- D            D       D(MANAGER_ID)          
--                      E(EMPLOYEE_ID)    E(FIRST_NAME)

SELECT A.DEPARTMENT_ID, A.DEPARTMENT_NAME, A.MANAGER_ID, B.FIRST_NAME
FROM DEPARTMENTS A, EMPLOYEES B
WHERE A.MANAGER_ID = B.EMPLOYEE_ID(+);

--직원아이디, 직원이름, 소속부서 아이디, 소속부서명 조회하기
-- E            E         E
--                        D          D
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_NAME 
FROM EMPLOYEES A, DEPARTMENTS B
WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID(+); --(+)기호로 NULL값을 표현할수 있다.

-- ANSI SQL
SELECT A.EMPLOYEE_ID, A.FIRST_NAME, A.DEPARTMENT_ID, B.DEPARTMENT_NAME 
FROM EMPLOYEES A
LEFT OUTER JOIN DEPARTMENTS B  --LEFT OUTER JOIN은 선행테이블의 모든 행을 조회한다. -- LEFT는 선행
ON A.DEPARTMENT_ID = B.DEPARTMENT_ID;

-------------------------------------------------------------------------------------------------------------
-- 'ST_CLERK'로 근무하다가 다른 직종으로 변경한 직원의 아이디, 이름, 변경전 부서명, 현재 직종아이디, 현재 근무부서명을 조회하기
SELECT E.EMPLOYEE_ID,
           E.FIRST_NAME,
           H.JOB_ID   AS 이전직종,
           E.JOB_ID    AS 현재직종,
           D1.DEPARTMENT_NAME  AS 이전부서명,
           D2.DEPARTMENT_NAME  AS 현재부서명
FROM JOB_HISTORY H,     -- 직종변경이력정보(예전직종, 이전소속부서아이디)
     EMPLOYEES E,       -- 직원정보(현재직종, 현재소속부서아이디)
     DEPARTMENTS D1,    -- 예전소속부서정보
     DEPARTMENTS D2     -- 현재소속부서정보
WHERE H.JOB_ID = 'ST_CLERK'
AND H.EMPLOYEE_ID = E.EMPLOYEE_ID
AND H.DEPARTMENT_ID = D1.DEPARTMENT_ID
AND E.DEPARTMENT_ID = D2.DEPARTMENT_ID;   
